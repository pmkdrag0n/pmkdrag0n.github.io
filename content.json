{"pages":[{"title":"Tổng hợp Cheat Sheet","text":"","link":"/cheat_sheet/index.html"},{"title":"About Me","text":"Just a guy who wants to share his knowledge about Networking, Linux,…","link":"/about/index.html"}],"posts":[{"title":"Lý do vì sao nên dùng Arch Linux?","text":"Mình là một Distro hopper việc chuyển đổi qua các Linux Distro khác là một điều thường xuyên nên những bản linux mình đều thử dùng qua cả rồi. Bắt đầu từ Ubuntu -&gt; PopOS! -&gt; Kali Linux -&gt; Solus … -&gt; Manjaro và cuối cùng là Arch Linux là điểm dừng chân cuối cùng. Vậy lý do vì sao mình quyết định chọn Arch Linux làm điểm dừng chân cuối cùng? 1. Với Arch Linux, bạn sẽ trở thành Powerful UserBạn có thể tự tay mình lựa chọn các thành phần để dựng lên một Linux PC của riêng mình, từ Display Server cho đến Desktop Enviroment. Tuy nhiên việc này đánh đổi với nhiều thách thức vì việc cài các driver audio, wifi, GPU đều phải tự cài, việc này yêu cầu tốn nhiều thời gian và cần có lượng kiến thức cần thiết để cài đặt. Vì vậy Arch Linux được cho là khó cài đặt hơn các Distro khác. Nhưng nếu bạn kiên nhẫn và chịu khó đọc document của Arch Linux thì việc cài đặt sẽ không khó mấy 2. Hệ thống Arch WikiArch Linux có một trang Wiki, trên đây có hầu như tất cả các vấn mà mình thường mắc phải và được giải thích rất chi tiết về mặt kỹ thuật. Vì vậy bạn chỉ cần biết một chút tiếng Anh là có thể lên đây tham khảo. Mình thường sử dụng trang này để tra thêm một số kiến thức về Linux với từ khoá google search: 1[Vấn đề cần kiếm] + arch linux archlinux.org 3. pacman và AUR( Arch User Repository)Để cài đặt package trên Ubuntu thường sẽ dùng APT và đối với CentOS sẽ dùng yum. Còn đối với Arch Linux sẽ là pacman, cách sử dụng pacman tương đối đơn giản và dễ làm quen Để cài đặt một package, sử dụng câu lệnh 1pacman -S &lt;tên package&gt; &lt;tên package Để gỡ bỏ một package trong hệ thông 1pacman -R &lt;tên package Để update hệ thống, sử dụng câu lệnh 1pacman -Syyu Ngoài ra khi một package không có trong Arch Repos thì có thể nó sẽ nằm trong AUR. AUR ở đây sẽ tập hợp các package được người dùng cộng đồng tính chỉnh lại cho phù hợp với Arch Linux. Việc sử dụng AUR cũng trở nên đơn giản hơn khi có AUR helper với 2 đại diện chính của CLI là yay và trizen (mình chọn trizen), và có thể cài đặt thêm phiên bản giao diện là octopi và pamac Việc sử dụng trizen để tìm kiếm và cài đặt một package cũng đơn giản hơn. Dưới đây là output khi mình tìm package vmware 1trizen vmware 4. Không cần phải nâng cấp hệ thốngCác Distro như Ubuntu, CentOS,… thường có những bản update lớn như từ Ubuntu 16.04 -&gt; 18.04, CentOS 7 -&gt; ,… nhưng ở Arch Linux chỉ cần 1 dòng lệnh là máy tính của bạn sẽ được update lên bản mới nhất. Bạn cài đặt Arch một lần và tải xuống các bản cập nhật vô thời hạn mà không phải suy nghĩ về việc nâng cấp lên phiên bản mới Tóm lạiArch Linux cho phép bạn tự build các thành phần của Linux PC của mình một cách tự do không ràng buộc, cùng với hệ thống wiki và AUR hỗ trợ người dùng. Nhưng việc cài đặt Arch Linux khó khăn đối với người mới dùng Linux, đa số thực hiện bằng CLI ( command line interface). Có thể sử dụng Manjaro để cài đặt và trải nghiệm dễ dàng hơn. Khi cài đặt được Arch Linux thì bạn sẽ có một lượng kiến thức về Linux ngay cả khi bạn chuyển sang dùng Distro khác, đây là một cách để tìm hiểu về Linux mà không cần qua một khoá học nào cả. Bonus123456Cài đặt AUR trên Arch Linux (trizen)pacman -S base-develcd /tmp/git clone http://aur.archlinux.org/trizen.gitcd trizenmakepkg -si Cách setup Arch Linux: Link","link":"/2020/07/18/Ly-do-vi-sao-nen-dung-Arch-Linux/"},{"title":"Mình đã setup Arch Linux như thế nào? (Part 1: Install ArchLinux &amp; Bootloader)","text":"Mình là một fan của Linux trải nghiệm nhiều loại Distro ( Ubuntu, CentOS, Kali,…) Nhưng khi trải nghiệm đến Manjaro thì mình quyết định dừng chân tại đây vì Manjaro hội tụ các yếu tố mà mình cần đó là sử dụng Distro một cách lâu dài, không phân version như các Distro khác, bạn chỉ cần cài đặt một lần trên máy bạn một lần và update nó chỉ với 1 lệnh duy nhất. Khi tìm hiểu thêm thì mình thấy Manjaro thuộc nhánh Distro của Arch Linux. Arch Linux là một trong những hệ điều hành phổ biến nhất. Nó cho phép bạn cài đặt PC của bạn từ Desktop Enviroment đến terminal, tất cả mọi thứ bạn đều có thể tự lựa chọn được. Vì thế mình thử try hard một lần xem sao. Đầu tiên thì chuẩn bị cài đặt Arch Linux thì mình cần các thứ như sau: 1 USB tầm 4GB ISO cài đặt của Arch Linux ( có thể tải tại đây ) Laptop cài đặt cần được kết nối mạng Đầu tiên thì mình sẽ dùng phần mềm Rufus để tạo USB cài đặt ( Lưu ý chọn mode DD)Sau đó thì mình sẽ phân vùng ổ đỉa thành 3 phân vùng để Dual boot với Windows Phân vùng Boot EFI: phân vùng này do cài đặt sẵn Windows với boot UEFI nên sẽ có sẵn nên không cần phải phân vùng ( Lưu ý không format phân vùng này nếu không sẽ không vào được Windows). Phân vùng ROOT: phân vùng này chưa các thành phần chính của HĐH nên mình sẽ để ở trên SSD tầm khoảng 30–40 GB là ổn. Phân vùng Home: phân vùng này sẽ chứa các thành phần của User nên mình sẽ để trên HDD khoảng 50–70GB là ổn. Sau khi tạo USB cài đặt xong thì mình sẽ boot vào bắt đầu cài đặt. Giao diện cài đặt Arch Linux là một màn hình đen thui với vời những dòng command line mà thôi. Chuẩn bịViệc đầu tiên là cần phải xác định các phân vùng của mình có tên là gì bằng câu lệnh blkid thường thì nó sẽ có dạng /dev/sd[X][Y], trong đó X sẽ là a và b tương ứng với ổ đĩa 1 (SSD) và ổ đĩa 2 (HDD) của máy mình. Còn Y sẽ là số thứ tự phân vùng. Khi sử dụng lệnh blkid thì mình đã biết được vị trí cần cài đặt là: EFI: /dev/sda1 root ( / ): /dev/sda3 home: /dev/sdb4 Phân vùng cài đặtmình sẽ tiến hành format phân vùng home và root sau đó mount để tiến hành cài đặt: 12345678910# format phân vùngmkfs.ext4 /dev/sda3mkfs.ext4 /dev/sdb4# tạo thư mục để mountmkdir /mnt/bootmkdir /mnt/home# tiến hành mountmount /dev/sda3 /mntmount /dev/sda1 /mnt/bootmount /dev/sdb4 /mnt/home Nếu các bạn không có cáp mạng thì cần phải kết nối wifi bằng lệnh 1wifi-menu Cài đặt Arch Linux bằng lệnh pactrap1pacstrap -i /mnt base base-devel linux mkinitcpio neovim zsh Tạo file fstab ( file này sẽ lưu trữ thông tin các phân vùng mount)1genfstab -Up /mnt &gt;&gt; /mnt/etc/fstab Thay đổi root từ USB vào Arch Linux mới cài bằng lệnh arch-chroot1arch-chroot /mnt Cài đặt ngôn ngữ và location1234nvim /etc/locale.gen#ở đây mình sẽ dùng en_US.UTF-8#nên sẽ bỏ dấu thăng ở dòng này và lưu file lại rồi chạy lệnh dướilocale-gen Cài đặt thời gian123456# Xem list Zone bằng lệnhls /usr/share/zoneinfo#link time zone Ho_Chi_Minh City vào /etc/localtimeln -sf /usr/share/zoneinfo/Asia/Ho_Chi_Minh /etc/localtime# Config clockhwclock --systohc --utc Cài đặt Network12345echo &quot;BlackDrag0n&quot; &gt; /etc/hostname# cài đặt DHCPpacman -S dhcpcdsystemctl enable dhcpcd.servicesystemctl start dhcpcd.service Thiết lập pacman repositories1234567891011nvim /etc/pacman.conf# bỏ dấu # trước [multilib] như bên dưới[multilib]Include = /etc/pacman.d/mirrorlist# thay đổi khu vực downloadnvim /etc/pacman.d/mirrorlist#tìm dòng [Vietnam] copy paste lên đầu tiên để ưu tiên Thiết lập User123456# Mật khẩu rootpasswdpacman -Sy sudo# chỉnh sửa sudo để user có quyền rootEDITOR=nvim visudo#bỏ dấu # trước dòng #%wheel ALL=(ALL) ALL và lưu lại Tạo User12# pmk ở đây là tên User mình muốn đặtuseradd -m -g users -G wheel,storage,network,power -s /usr/bin/zsh pmk Cài đặt intel-ucode (amd-ucode) # cái này dùng để patch lỗi cho CPU1pacman -S intel-ucode Tạo file boot cho Linux bằng lệnh mkinitcpio12mkinitcpio -p linux#khi này trong thư mục /boot sẽ có 3 file là initramfs-linux.img initramfs-linux-fallback.img và vmlinuz-linux Cài đặt Boot managerThường thì các bản Distro Linux sẽ dùng Grub để làm boot manager nhưng ở đây mình sẽ cài đặt Clover Bootloader để làm boot manager nên mình sẽ skip phần cài Grub cài luôn Clover vào. Các bạn có thể tham khảo cách cài Grub tại đây. 12345678910# install os-prober efibootmgr dosfstoolspacman -Sy os-prober efibootmgr dosfstools# install grub EFI to EFI partition mount as /bootgrub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=grub --boot-directory=/boot/EFI --recheck --debug# generate grub config filegrub-mkconfig -o /boot/EFI/grub/grub.cfg Để cài đặt Clover thì có thể lấy sẵn file của mình build sẵn sửa UUID đi là được. Đây là file Clover mẫu của mình, các bạn có thể clone về và copy vào thử mực /boot/EFI/ . Mọi thiết lập cài đặt đều nằm trong config.plist Ở file config.plist tìm đến Entries để chỉnh sửa thì dưới đây là một cấu hình mẫu của Windows 10 của mình. Mục bôi đỏ thì các bạn thay số UUID của phân vùng EFI (/dev/sda1 hiện tại đang setup) của bạn vào. Số UUID có thể lấy được bằng lệnh blkid Còn phân vùng Arch Linux thì thay phần bôi đỏ này bằng UUID của phân vùng root ( /dev/sda3 của mình) Còn phần fallback là phần backup khi có lỗi up kernel của Arch thì mình có thể vào lại được không bắt buộc. Exit và Reboot Usb cài Arch123exitumount -R /mntshutdown -r now Boot vào bios và thêm boot entry của clover vào. Đây là thành quả đạt được Cài đặt một số thứ cần thiếtLogin với User mà mình vừa tạo và bắt đầu cài đặt những package cần thiết 123456789101112131415161718sudo pacman -Syyu# install xorg serversudo pacman -S xorg-server xorg-server-utils xorg-xinit mesa# install Driver for laptopsudo pacman -S xf86-input-synaptics# fix alway mute soundsudo pacman -S alsa-utilsalsamixer Sset Master unmute# install NetworkManagerpacman -S NetworkManagersudo systemctl stop dhcpcd.servicesudo systemctl disable dhcpcd.servicesudo systemctl enable NetworkManager.servicesudo systemctl start NetworkManager.service Cài đặt AUR helpers12345#Arch User Repository giúp cho chúng ta cài đặt các app không có trong repositories của Archcd /tmp/git clone https://aur.archlinux.org/trizen.gitcd trizenmakepkg -si Cài đặt terminal12# Vì mình không thích konsole của KDE nên đã cài 1 thằng khác là kittytrizen -S kitty --confirm Cài đặt Desktop Enviroment (DE)Có rất nhiều loại DE mà các bạn có thể lựa chọn, nhưng ở đây mình sẽ cài đặt KDE 123sudo pacman -S plasma sddm#khởi động sddm để log vào kde kiểm tra coi có lỗi khôngsystemctl start sddm.service Như vậy là đã cài đặt thành công Arch Linux lên máy mình. Ở phần tiếp theo mình sẽ hướng dẫn tối ưu hoá workflow trên Linux","link":"/2020/07/18/Minh-da-setup-Arch-Linux-nhu-the-nao-Part-1-Install-ArchLinux-Bootloader/"},{"title":"Mình đã setup Arch Linux như thế nào? (Part 2: Setup Nvidia driver + Zsh plugins + alias)","text":"Ở phần trước mình đã setup xong Arch Linux với Clover bootloader và KDE desktop. Tiếp theo ở phần này mình sẽ hướng dẫn các bạn cách cài đặt driver NVIDIA cùng với đó là cấu hình ZSH để sử dụng. Cấu hình máy để tham khảo: Bộ xử lý Intel® Core™ i5 7300HQ NVIDIA GeForce GTX 1050Thông thường việc cài đặt Nvidia driver sẽ gặp nhiều khó khăn vì các máy Linux sẽ có cài đặt sẵn nouveau driver. Đây là Graphic driver opensource sẽ gây xung đột với Nvidia driver nên mình phải disable nó đi bằng cách thêm parameter nouveau.modeset=0 vào Clover config.plist như hình dưới Add boot parameter Tiếp theo cài đặt Nvidia driver, Optimus-manager, Optimus-manager-qt. Optimus-manager phần quản lý mode graphic trên Linux, thông thường thì cài xong Nvidia driver thì iGPU intel và Nvidia GPUsẽ chạy song song mặc dù không cần dùng Nvidia GPU nên sẽ gây ra tốn pin, trên Optimus-Manager sẽ có mode Hybrid giúp chúng ta xử lý việc đó. Có rất nhiều phần mềm tương tự Optimus-manager như là bumblebee, nvidia-prime nhưng nó gây ra lỗi quạt fan chạy 100% trên máy của mình nên mình đã quyết định dùng optimus-manager Cài đặt Nvidia Driver1234# install nvidia driverpacman -S nvidia# check nvidia đã cài đặt hay chưanvidia-smi 12345Cài đặt Optimus-manager# Install optimus-managersudo pacman -S optimus-manager# install optimus-manager-qt ( applet của optimus-manager)trizen optimus-manager-qt vì mình dùng KDE nên phải config thêm 1 số thứ 123sudo nvim /etc/sddm/sddm.conf# thêm dấu # vào trước DisplayCommand và DisplayStopCommand để disable đi# nếu không có 2 dòng này có thể bỏ qua Thêm Autostart cho optimus-manager-qt Setup ZshZsh là bản mở rộng của Bourne Shell (sh), với nhiều chức năng mới cùng với nhiều plugins và theme. một số chức năng xịn xò trên Zsh: Automatic cd: chỉ cần gõ tên đường dẫn vào Recursive path expansion: Ví dụ “/u/lo/b” sẽ thành “/usr/local/bin” Spelling correction and approximate completion: Nếu bạn gõ sai chính tả thì Zsh sẽ sửa lại giúp bạn Plugin and theme support: Zsh hỗ trợ nhiều framework plugins khác nhau như git, Ansible, nodejs,…123456# Install Zsh và Zsh Pluginspacman -S zsh zsh-completion zsh-syntax-highlighting# Install ohmyzshsh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;# Install powerlevel10kgit clone --depth=1 https://github.com/romkatv/powerlevel10k.git $ZSH_CUSTOM/themes/powerlevel10k Để hiển thị ký tự đặc biệt của powerlevel10k thì cần cài đặt Nerd font bấm vào đây để tải về và cài đặt.Sau khi cài đặt hết thì ở thư mục home sẽ có 1 file tên .zshrc. Để config Zsh thì chúng ta tiến hành chỉnh sửa file này1234567sudo nvim ~/.zshrc# Tìm dòng ZSH_THEME sửa lại thànhZSH_THEME=&quot;powerlevel10k/powerlevel10k&quot;# Enable syntax-highlighting của ZSH bằng cách thêm đoạn này vào filesource /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh# Lưu file .zshrc và áp dụng thiết lập bằng lệnhsource ~/.zshrc Sau khi source ~/.zshrc sẽ hiện lên bảng setup powerlevel10k thực hiện cài đặt setup mà bạn muốn. Nếu các icon hiển thị không đúng khi đã cài đặt nerd font thì reset lại và dùng lệnh p10k configure để setup lại powerlevel10kTạo bộ Alias cho riêng mìnhThông thường mình hay sử dụng systemctl để sử dụng để start/enable service lên thì sẽ nhập với cú pháp1sudo systemctl enable/start [service] Để nhanh hơn thì mình sẽ tạo alias để sudo systemctl sẽ thành sc. Để tạo alias thì mình sẽ tiếp tục chỉnh sửa file .zshrc và thêm vào cuối file bộ alias của mình 12345678910111213141516171819202122232425nvim ~/.zshrc# Thêm vào cuối file #============(System)===================#alias sudo=&quot;sudo &quot;alias sc=&quot;sudo systemctl&quot;alias vim=&quot;sudo nvim&quot;alias pacman=&quot;sudo pacman&quot;#===================(Python)==========================#alias py=&quot;python3&quot;alias ve='python3 -m venv ./venv'alias va='source ./venv/bin/activate'#===============(Changing &quot;ls&quot; to &quot;exa&quot;)==========================# alias ls='exa -al --color=always --group-directories-first' # my preferred listingalias la='exa -a --color=always --group-directories-first' # all files and dirsalias ll='exa -l --color=always --group-directories-first' # long formatalias lt='exa -aT --color=always --group-directories-first' # tree listingalias cp=&quot;cp -i&quot; # confirm before overwriting somethingalias df='df -h' # human-readable sizesalias grep='grep --colour=auto'#==============(Docker)=============================#alias d='docker'#==============(ZSH config)=========================#alias config-zsh='vim ~/.zshrc'alias update-zsh='source ~/.zshrc'# Lưu file lại và source .zshrc để updatesource ~/.zshrc Vì trong alias của mình đã thay ls bằng exa nên phải cài đặt thêm 1sudo pacman -S exa Các bạn có thể theo dõi tại Dotfile của mình https://github.com/pmkdrag0n/dotfiles","link":"/2020/07/18/Minh-da-setup-Arch-Linux-nhu-the-nao-Part-2-Setup-Nvidia-driver-Zsh-plugins-alias/"},{"title":"Prometheus &amp; Grafana","text":"Đây là một dự án nhỏ của mình về hệ thống giám sát các thiết bị ở nhà tầm 5-10 người sử dụng. Tất cả đểu được triển khai trên một thiết bị Single-board computer (arm64). Hệ thống sẽ bao gồm Prometheus và Node_Exporter để lấy metric từ các thiết bị và Grafana để tạo Dashboard theo dõi các thông số dưới dạng biểu đồ. Prometheus là gì?Prometheus là một công cụ được sử dụng rộng rãi trong việc giám sát và cảnh báo hệ thống. Prometheus theo dõi các thông số của hệ thống trên thời gian thật và được xây dựng sẵn. Sử dụng các exporter để lấy thông tin của các host thu về server. Prometheus được tích hợp nhiều công cụ khác nhau như Grafana, Node_Exporter, Alertmanager,… vì thế việc Prometheus được sử dụng rộng rãi là điều không cần bàn tới. Grafana là gì?Grafana là một platform open source dụng để phân tích dữ liệu và thể hiện các dữ liệu thành các biểu đồ, đồ thị trên giao diện web. Là một công cụ phân tích dữ liệu thì Grafana thường xuyên được sử dụng kèm với các bộ Monitor, thường được tích hợp để hiển thị dữ liệu từ Prometheus, InfluxDB, và Graphite. Hoặc các công cụ monitor khác như Zabbix, Icinga, PRTG,… Chuẩn bịChuẩn bị: Một Server Linux dùng để cài đặt Prometheus và Grafana Một vài thiết bị hỗ trợ SNMP hoặc nhân UNIX để tiến hành giám sát Mô hình: Thiết bị mình dùng để giám sát là 1 con router TP-Link C50v4 chạy firmware Openwrt và chính server Linux của mình. Openwrt: 192.168.0.1 Server Prometheus: 192.168.0.169 Ở đây Node_Exporter sẽ lấy thông tin host đưa về Prometheus. Dữ liệu thô từ Prometheus sẽ được chuyển lên Grafana thành các dạng biểu đồ để chúng ta có thể theo dõi dễ dàng. Cài đặt và cấu hình PrometheusCác bản Prometheus sẽ được public tại đây. Ở đây mình sẽ sử dụng bản prometheus-2.2.0.1.linux-arm64 để cài đặt. Tiến hành tải về và bắt đầu cấu hình 12345# Download prometheus-2.2.0.1.linux-arm64.tar.gz wget https://github.com/prometheus/prometheus/releases/download/v2.20.1/prometheus-2.20.1.linux-arm64.tar.gz# Giải nén file vừa tải và copy vào hệ thốngtar -xvf prometheus-2.20.1.linux-arm64.tar.gzcp prometheus-2.20.1.linux-arm64 /etc/prometheus Sau khi chuyển xong thì thư mục prometheus sẽ như sau 12345678910blackdrag0n@BlackDrag0n:/etc/prometheus$ ls -lltotal 146876drwxr-xr-x 2 blackdrag0n blackdrag0n 4096 Aug 6 02:39 console_librariesdrwxr-xr-x 2 blackdrag0n blackdrag0n 4096 Aug 6 02:39 consoles-rw-r--r-- 1 blackdrag0n blackdrag0n 11357 Aug 6 02:39 LICENSE-rw-r--r-- 1 blackdrag0n blackdrag0n 3420 Aug 6 02:39 NOTICE-rwxr-xr-x 1 blackdrag0n blackdrag0n 87039446 Aug 6 01:43 prometheus-rw-r--r-- 1 blackdrag0n blackdrag0n 1143 Aug 26 06:18 prometheus.yml-rwxr-xr-x 1 blackdrag0n blackdrag0n 48818187 Aug 6 01:45 promtool-rwxr-xr-x 1 blackdrag0n blackdrag0n 14509304 Aug 6 01:46 tsdb Ở đây chúng ta chỉ cần quan tâm file prometheus và file config prometheus.yml. Tạo file service cho Prometheus trong thư mục /etc/systemd/system/promethus.service 12345678910111213141516# vim /etc/systemd/system/promethus.service[Unit]Description=PrometheusWants=network-online.targetAfter=network-online.target[Service]Type=simpleExecStart=/etc/prometheus/prometheus \\ --config.file /etc/prometheus/prometheus.yml \\ --storage.tsdb.path /var/lib/prometheus/ \\ --web.console.templates=/etc/prometheus/consoles \\ --web.console.libraries=/etc/prometheus/console_libraries[Install]WantedBy=multi-user.target Tiến hành khởi chạy Service Prometheus bằng lệnh 12systemctl daemon-reloadsystemctl start prometheus Kiểm tra tiến trình Prometheus đang chạy có lỗi gì hay không 12345678910111213141516171819blackdrag0n@BlackDrag0n:/etc/prometheus$ systemctl status prometheus● prometheus.service - Prometheus Loaded: loaded (/etc/systemd/system/prometheus.service; disabled; vendor preset: enabled) Active: active (running) since Wed 2020-08-26 06:18:15 +07; 18h ago Main PID: 5255 (prometheus) Tasks: 13 (limit: 3226) CGroup: /system.slice/prometheus.service └─5255 /etc/prometheus/prometheus --config.file /etc/prometheus/prometheus.yml --storage.tsdb.path /var/lib/pAug 26 18:00:05 BlackDrag0n prometheus[5255]: level=info ts=2020-08-26T11:00:05.386Z caller=compact.go:441 component=tsdAug 26 20:00:04 BlackDrag0n prometheus[5255]: level=info ts=2020-08-26T13:00:04.164Z caller=compact.go:495 component=tsdAug 26 20:00:04 BlackDrag0n prometheus[5255]: level=info ts=2020-08-26T13:00:04.221Z caller=head.go:804 component=tsdb mAug 26 22:00:03 BlackDrag0n prometheus[5255]: level=info ts=2020-08-26T15:00:03.970Z caller=compact.go:495 component=tsdAug 26 22:00:04 BlackDrag0n prometheus[5255]: level=info ts=2020-08-26T15:00:04.007Z caller=head.go:804 component=tsdb mAug 26 22:00:04 BlackDrag0n prometheus[5255]: level=info ts=2020-08-26T15:00:04.122Z caller=checkpoint.go:96 component=tAug 26 22:00:05 BlackDrag0n prometheus[5255]: level=info ts=2020-08-26T15:00:05.056Z caller=head.go:884 component=tsdb mAug 26 22:00:05 BlackDrag0n prometheus[5255]: level=info ts=2020-08-26T15:00:05.680Z caller=compact.go:441 component=tsdAug 27 00:00:03 BlackDrag0n prometheus[5255]: level=info ts=2020-08-26T17:00:03.966Z caller=compact.go:495 component=tsdAug 27 00:00:04 BlackDrag0n prometheus[5255]: level=info ts=2020-08-26T17:00:04.005Z caller=head.go:804 component=tsdb m Khi này truy cập vào giao diện web của prometheus với cú pháp http://[Server IP]:9090 sẽ ra được giao diện giống hình Cài đặt và cấu hình Node_ExporterCác bản Node_exporter release tại đây. Tương tự như trên thì ở đây mình dùng bản node_exporter-1.0.1.linux.arm64. Tiến hành tải về và tiền hành cài đặt 1234# Download Node_exporter wget https://github.com/prometheus/node_exporter/releases/download/v1.0.1/node_exporter-1.0.1.linux-arm64.tar.gz# giải nén file vừa tảitar -xvf node_exporter-1.0.1.linux-arm64.tar.gz Khi giải nén xong sẽ được thư mục node_exporter như sau 12345blackdrag0n@BlackDrag0n:~/node_exporter-1.0.1.linux-arm64$ ls -lltotal 18376-rw-r--r-- 1 blackdrag0n blackdrag0n 11357 Jun 16 20:19 LICENSE-rwxr-xr-x 1 blackdrag0n blackdrag0n 18800055 Jun 16 19:47 node_exporter-rw-r--r-- 1 blackdrag0n blackdrag0n 463 Jun 16 20:19 NOTICE Ở đây ta cần copy file node_exporter vào đường dẫn /usr/local/bin/ và tạo service 1234567891011121314151617# Chuyển node_exporter vào hệ thốngcp ~/node_exporter-1.0.1.linux-arm64/node_exporter /usr/local/bin# tạo servicevim /etc/systemd/system/node_exporter.service[Unit]Description=Node ExporterWants=network-online.targetAfter=network-online.target[Service]Type=simpleExecStart=/usr/local/bin/node_exporter[Install]WantedBy=multi-user.target Sau khi tạo xong khởi chạy tiến trình và kiểm tra xem node_exporter đã chạy có bị lỗi gì hay không 123456789101112system daemon-reload &amp;&amp; systemctl restart node_exporter.service# kiểm tra tiến trình node_exporterblackdrag0n@BlackDrag0n:~$ systemctl status node_exporter.service● node_exporter.service - Node Exporter Loaded: loaded (/etc/systemd/system/node_exporter.service; disabled; vendor preset: enabled) Active: active (running) since Wed 2020-08-26 06:13:07 +07; 1 day 18h ago Main PID: 5011 (node_exporter) Tasks: 19 (limit: 3226) CGroup: /system.slice/node_exporter.service └─5011 /usr/local/bin/node_exporterWarning: Journal has been rotated since unit was started. Log output is incomplete or unavailable. Cấu hình node_exporter trong prometheus.yml 12345678910111213141516vim /etc/prometheus/promethus.yml# Thêm vào cuối file 3 target (Có thể target prometheus có sẵn rồi)# 192.168.0.1 là thiết bị Openwrt của mìnhscrape_configs: - job_name: 'prometheus' static_configs: - targets: ['localhost:9090'] - job_name: 'node_exporter' scrape_interval: 5s static_configs: - targets: ['localhost:9100'] - job_name: 'openwrt' scrape_interval: 5s static_configs: - targets: ['192.168.0.1:9100'] Lưu lại và restart lại service prometheus 1systemctl restart prometheus Sau đó dùng trình duyệt web để kiểm tra với đường dẫn http://192.168.0.169:9090/targets Như vậy là đã cài đặt xong node_exporter và có thể tiến hành query metric của node_exporter 1curl http://localhost:9100/metrics Lưu ý: Nhớ mở port 9100 để có thể query được. Node_exporter trên OpenwrtTrên Openwrt, thực hiện update và cài đặt các package node_exporter 12opkg updateopkg install prometheus-node-exporter-lua prometheus-node-exporter-lua-netstat prometheus-node-exporter-lua-openwrt prometheus-node-exporter-lua-wifi prometheus-node-exporter-lua-wifi_stations Cấu hình node_exporter trên openwrt 123456vim /etc/config/prometheus-node-exporter-luaconfig prometheus-node-exporter-lua 'main' option listen_interface '*' option listen_ipv6 '0' option listen_port '9100' Tiến hành mở port 9100 cho Openwrt. Sau đó dùng lệnh cURL để kiểm tra các metric của thiết bị openwrt 1curl http://192.168.0.1:9100/metrics Cài đặt Grafana trên DockerYêu cầu Server Linux phải được cài đặt sẵn Docker. Tiến hành khởi tạo Container Grafana 1docker run -d -p 80:3000 --name grafana grafana/grafana Với lệnh này mình sẽ có Grafana chạy ở port 80. Sử dụng trình duyệt web để truy cập vào Đăng nhập với username/password là admin/admin, thay đổi password theo ý của bạn. Tiến hành cài đặt Prometheus làm Database ở mục Configuration -&gt; Data source -&gt; Add data source -&gt; Prometheus và cấu hình như hình. Tiếp theo bạn cần có Dashboard, Có thể tự tạo riêng cho mình một DashBoard hoặc có thể lấy sẵn Template về chỉnh sửa. Ở đây mình sử dụng 2 Template dành cho Openwrt và Linux Server. Copy code id và vào mục Create -&gt; Import -&gt; nhập ID vào. Đây là thành quả Openwrt Prometheus Server Ngoài ra, có thể tạo Dashboard và thêm tham số để query thêm như hình dưới là một lệnh query nhiệt độ của Prometheus Server, có thể chỉnh sửa đơn vị trong tab Field như hình Như vậy mình đã hoàn thành xong hệ thống Monitoring của mình. Nhưng vẫn còn một số vấn đề mình chưa giải quyết được là các metrics của các thiết bị có thể bị khai thác mà ko cần có Username và Password nên mình sẽ tìm cách khắc phục điều đó trong bài sau. Tài liệu tham khảo https://prometheus.io/docs/ https://grafana.com/docs/grafana/latest/installation/docker/","link":"/2020/08/26/Prometheus-Grafana/"},{"title":"Python cơ bản","text":"Python là một ngôn ngữ được sử dụng rộng rãi trong nhiều lĩnh vực như AI, Data analysis, machine learning,… Còn đối với Network, Python cho phép bạn build một đoạn Script có thể tự động hoá hệ thống mạng phức tạp của bạn. Một trong những lý do Python được chọn để sử dụng để tự động hoá hệ thống bao gồm: Dễ sử dụng không cần cú pháp rườm rà (Nếu bạn đã biết một số ngôn ngữ lập trình như C, Java,… thì việc làm quen với python rất dễ dàng ) Không cần phải compile ( Bạn có thể chạy script trên bất kỳ thiết bị nào như Máy tính cá nhân của bạn, Server, Router/Switch,…) Có thể dùng bất kỳ Editor nào để code Python Dưới đây là một số Syntax của python mình tổng hợp lại Chạy file python:Trên Linux sẽ là python3 thay vì py như trên Windows 1$ py [tên file].py Data type: Data Type Examples Integers -2, -1, 0, 1, 2, 3, 4 Floating -1.25, -1.0, –0.5 Strings “Hello” Boolean True, False Có thể dùng hàm type() để kiểm tra data type Numerical Operators (Phép toán) Cộng + Trừ - Nhân * Chia / Chia lấy dư (mod) % Mũ ** Variables:1234567&gt;&gt;&gt; str1=&quot;Cisco&quot;&gt;&gt;&gt; str2=&quot;Networking&quot;&gt;&gt;&gt; str1 + str2&gt;&gt;&gt; CiscoNetworking 12345678&gt;&gt;&gt; str=”Cisco”&gt;&gt;&gt; a = 3&gt;&gt;&gt; str*3&gt;&gt;&gt; CiscoCiscoCisco Quy tắc đặt tên biếnQuy tắc đặt tên biến cho Python: Không được bắt đầu bằng chữ số [0-9] Có thể chưa các ký tự [A-Za-z0-9_-] Một số quy chuẩn đặt tên cho variables, classes, functions như PEP8 Không được sử dụng các từ khoá Basic I/O:Để nhận giá trị người dùng nhập vào dùng hàm input() 1234&gt;&gt;&gt; i = input(“Enter a Number: ”)&gt;&gt;&gt; Enter a Number: 1&gt;&gt;&gt; int(i)&gt;&gt;&gt; 1 Để in ra màn hình người dùng sử dụng hàm print() 12&gt;&gt;&gt; print(‘a’, ‘b’, ‘c’)&gt;&gt;&gt; a b c Conditionals (if…elif…else):1234567if expression1: statements…elif expression2: statements…else: statements Comparison Operators: Bé hơn &lt; Lớn hơn &gt; Bé hơn bằng &lt;= Lớn hơn bằng &gt;= Bằng == Khác != Chứa trong in Có thể kết hợp với and, or*,* và not\\ dùng để phủ định Ví dụ: 1234567&gt;&gt;&gt; Devices = [&quot;R1&quot;,&quot;R2&quot;,&quot;R3&quot;]&gt;&gt;&gt; if &quot;Sw&quot; not in Devices:... print(&quot;Switch not in devices&quot;)... else:... print(&quot;Switch in devices&quot;)...Switch not in devices Functions:12345def function_name(arg_names): statements…return value Data Structures:List: - Là danh sách chứa các item bên trong - Item bên trong có thể là bất kỳ loại dữ liệu nào - Bắt đầu bằng dấu [] Ví dụ: 1[‘a’, 1, 18.2] Dictionary (dict): - Là danh sách chưa các cặp key- value ( tương tự JSON) Ví dụ: 12{“apples”: 5,“pears”: 2,“oranges”: 9} Cách sử dụng list và dict: List: Creating:1l=[‘a’,1, 18.2] Accessing:12&gt;&gt;&gt;l[2] 18.2 Updating:123&gt;&gt;&gt;l[2] = 20.4 &gt;&gt;&gt;l[‘a’, 1, 20.4 ] Dictionary: Creating:1d = {“apples”: 5, “pears”: 2, “oranges”: 9} Accessing:12&gt;&gt;&gt;d[“pears”] 2 Updating:123&gt;&gt;&gt;d[“pears”]=6 &gt;&gt;&gt;d{“apples”: 5, “pears”: 6, “oranges”:9} 1234567891011 # **Loops:**​``` pythonIterative Loops (For): for individual_item in iterator: statements… Ví dụ: 1234567891011121314&gt;&gt;&gt; names = [&quot;chris&quot;, &quot;iftach&quot;, &quot;jay&quot;]&gt;&gt;&gt; for name in names:... print(name)...chrisiftach jay Conditional Loops (While):123while logical_expression: statements… Ví dụ: 12345678910111213141516171819\\&gt;&gt;&gt; i = 0\\&gt;&gt;&gt; while True:... print(i)... i += 1...01234 FormatSử dụng hàm format() để xử lý String. Ví dụ: 123&gt;&gt;&gt; name = &quot;Khoi&quot;&gt;&gt;&gt; print(&quot;Hello, my name is {}&quot;.format(name))Hello, my name is Khoi Troubleshoot code pythonCác quy tắc khi kiểm tra lỗi code python: Đọc dòng cuối cùng đầu tiên Đọc từ trên xuống Bỏ qua khi gặp code người khác Comment123#This is#Single line#Comment Doc String12345'''this is multiple line comment''' Using ModulesModule ở đây các bạn chỉ cần hiểu đơn giản nó là code của người khác và mình sử dụng lại nó bằng cách import. Mình cũng có thể sử dụng lại code của mình nữa 123import osimport sysimport (something) Updated: 23/07/2020","link":"/2020/07/19/Python-co-ban/"},{"title":"Thiết lập Workstation dành cho DevNet trên Windows với WSL 2","text":"Trong bài viết này, mình sẽ chia sẻ những thiết lập của mình trên Windows trong quá trình tìm hiểu DevNet. Vì một số tools, phần mềm chỉ chạy trên nhân UNIX nên mình sử dụng WSL để sử dụng những tools đó trực tiếp trên Windows mà không cần dựng máy ảo. Các công cụ cần được cài đặtHiện tại thì WSL sẽ có 2 phiên bản là version 1 và version 2. Ở version 2, tốc độ xử lý của WSL tăng lên đáng kể nhưng chỉ hỗ trợ từ bản Windows 10 version 2004 trở lên. Vì vậy cần update Windows ở bản mới nhất. Cần chuẩn bị trước những thứ sau: Python 3 - Link Visual Studio Code - Link ( Có thể chọn trình Editor mình hay dùng) Windows Terminal - Link Docker Desktop - Link Postman Link VMware Workstation 15.5.5 trở lên LinkTừ bản VMware workstation 15.5.5 trở về sau bắt đầu hỗ trợ cài đặt trên các máy đã bật Hyper-V với Windows Hypervisor Platform (WHP) nên sẽ không còn lỗi Credentials Guard khi chạy máy vmware nữa EVE-NG hoặc GNS3 Setup WSL 2Enable Windows Subsystem for Linux và Hyper-V ở Control Panel -&gt; Programs -&gt; Turn Windows features on or off Restart máy và vào Microsoft Store để download WSL distro Install Windows Terminal on Microsoft Store . Setup Windows terminal các bạn có thể tham khảo ở đây. Set a distro to be backed by WSL 2 bằng command lineKiểm tra version của WSL bằng command line trên powershell 1wsl -l -v Như ở đây mình có ubuntu 18.04 là version 2. Nhưng nếu ai là version 1 thì có thể set thủ công bằng lệnh 1wsl --set-version &lt;Distro&gt; 2 ở đây là Ubuntu-18.04 Khi lần đâu tiên cài Distro xong cần phải update repo 1sudo apt update &amp;&amp; sudo apt upgrade Trên WSL cần cài đặt Ansible, Python, git, Zsh + Zsh plugins (Optional), 12345678# Ubuntu installsudo apt-get install python3 python3-pip zsh zsh-completions git# Install Ansible with root usersudo apt-add-repository ppa:ansible/ansiblesudo apt-get install ansible Install oh-my-zsh: 1sh -c “$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot; Install powerlevel10k (optional): 123git clone --depth=1 https://github.com/romkatv/powerlevel10k.git $ZSH_CUSTOM/themes/powerlevel10k#Then set ZSH_THEME=&quot;powerlevel10k/powerlevel10k&quot; in ~/.zshrc. Recommend font for powerlevel10k: Meslo Nerd Font Clone dircolors solarized về : 1git clone https://github.com/seebi/dircolors-solarized Lưu ý: cần nhớ đường dẫn chứa dircolors solarized để chỉnh sửa file .zshrc Sử dụng vim hoặc nano để chỉnh sửa file .zshrc 1vim ~/.zshrc Thêm vào file dòng 1eval `dircolors ~/dircolors-solarized/dircolors.256dark` Trong đó ~/dircolors-solarized/ là đường dẫn vừa tải về. Sau khi sửa xong update zsh bằng câu lệnh: 1source ~/.zshrc Tuy không được hoàn hảo nhưng nó giúp cho terminal của bạn dễ nhìn hơn Setup Docker for WSL 2 backend Vào Docker -&gt; Setting -&gt; General và Enable Expose daemon và WSL 2 based engine lên. Sau đó vào Resources -&gt; WSL integration -&gt; Enable distro của bạn lên. Updated: 23/07/2020","link":"/2020/07/21/Thiet-lap-Workstation-danh-cho-DevNet-tren-Windows-voi-WSL-2/"}],"tags":[{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"Setup","slug":"Setup","link":"/tags/Setup/"},{"name":"Monitor","slug":"Monitor","link":"/tags/Monitor/"},{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"WSL2","slug":"WSL2","link":"/tags/WSL2/"}],"categories":[{"name":"Linux","slug":"Linux","link":"/categories/Linux/"},{"name":"Network Automation","slug":"Network-Automation","link":"/categories/Network-Automation/"}]}